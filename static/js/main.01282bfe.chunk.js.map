{"version":3,"sources":["components/Autocomplete.js","components/Home.js","components/About.js","components/Stars.js","components/RankedRoute.js","algorithm.js","components/Slider.js","components/LoadingButton.js","components/Preferences.js","components/SortableTable.js","components/Recommendation.js","App.js","index.js","assets/fly.jpg"],"names":["props","items","getItemValue","item","itemKey","renderItem","isHighlighted","style","background","key","value","wrapperStyle","position","display","inputProps","shouldItemRender","v","toLowerCase","indexOf","sortItems","a","b","aLower","bLower","vLower","queryPosA","queryPosB","sortKey","onChange","e","setValue","target","onSelect","setItem","menuStyle","borderRadius","boxShadow","padding","fontSize","overflow","maxHeight","zIndex","useState","userValue","setUserValue","userObject","setUserObject","Jumbotron","backgroundSize","backgroundImage","fly","to","Button","variant","Container","users_array","n_votes","adjective","Row","marginTop","Col","size","measure","source","starColor","emptyStarColor","name","starCount","rating","onStarClick","nextValue","setRating","autocompleteValue","setAutocompleteValue","newRoute","setRoute","index","routes_array","width","Stars","newRating","onClick","routeListToObjectOfRatings","routeList","filter","route","reduce","acc","getWeights","preferences","Object","keys","starsObject","user","user1","user2","influence","Math","log2","length","intersection","hasOwnProperty","bind","dist","sum","abs","getDistance","includes","total","stdObject","getRecommendations","recommendations","initialRoutesArray","map","route2","route1","route1Array","entries","slopeOneObject","l","s","cur","prediction","min","max","slope_one_prediction","slopeOne","routesArray","weights","routesAsObjects","score","maxScore","routeObject","multiplier","values","object","predictions","neighbor_prediction","nearestNeighbors","forEach","avg_prediction","toFixed","disabled","submitButtonClicked","allowSubmit","setSubmitButtonClicked","setRecommendations","Alert","minRequired","LoadingButtonText","useEffect","setTimeout","Spinner","animation","push","pathname","initialRouteList","window","history","state","setRouteList","setAllowSubmit","replaceState","className","marginBottom","RankedRoute","passedIndex","newRouteList","LoadingButton","gradeList","createSliderWithTooltip","Slider","Range","n","letter","toString","grade","Styles","styled","div","Table","columns","data","useTable","initialState","sortBy","id","desc","sortDescFirst","useSortBy","useBlockLayout","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","row","i","getRowProps","cells","cell","getCellProps","render","Header","accessor","Cell","href","original","url","sortMethod","Number","location","margin","undefined","SortableTable","exact","path","component","Home","About","Preferences","Recommendation","ReactDOM","App","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.01282bfe.chunk.js","sourcesContent":["import React from \"react\";\nimport Autocomplete from \"react-autocomplete\";\n\nexport default (props) => (\n  <Autocomplete\n    items={props.items}\n    getItemValue={(item) => item[props.itemKey]}\n    renderItem={(item, isHighlighted) => (\n      <div\n        style={{ background: isHighlighted ? \"lightgray\" : \"white\" }}\n        key={item[props.itemKey]}\n      >\n        {item[props.itemKey]}\n      </div>\n    )}\n    value={props.value}\n    wrapperStyle={{\n      position: \"relative\",\n      display: \"inline-block\",\n    }}\n    inputProps={props.inputProps}\n    shouldItemRender={(item, v) =>\n      item[props.itemKey].toLowerCase().indexOf(v.toLowerCase()) !== -1\n    }\n    // See sortStates documentation here:\n    // https://github.com/reactjs/react-autocomplete/blob/master/lib/utils.js\n    sortItems={(a, b, v) => {\n      const aLower = a[props.itemKey].toLowerCase();\n      const bLower = b[props.itemKey].toLowerCase();\n      const vLower = v.toLowerCase();\n      const queryPosA = aLower.indexOf(vLower);\n      const queryPosB = bLower.indexOf(vLower);\n      if (queryPosA !== queryPosB) {\n        return queryPosA - queryPosB;\n      }\n      return aLower[props.sortKey] < bLower[props.sortKey] ? -1 : 1;\n    }}\n    onChange={(e) => props.setValue(e.target.value)}\n    onSelect={(v, item) => {\n      props.setValue(v);\n      props.setItem(item);\n    }}\n    menuStyle={{\n      borderRadius: \"3px\",\n      boxShadow: \"0 2px 12px rgba(0, 0, 0, 0.1)\",\n      background: \"rgba(255, 255, 255, 0.9)\",\n      padding: \"2px 0\",\n      fontSize: \"90%\",\n      position: \"fixed\",\n      overflow: \"auto\",\n      maxHeight: \"50%\",\n      zIndex: \"998\",\n    }}\n  />\n);\n","import React, { useState } from \"react\";\nimport { Jumbotron, Button, Row, Container, Col } from \"react-bootstrap\";\nimport Link from \"react-router-dom/Link\";\nimport Autocomplete from \"./Autocomplete\";\nimport users_array from \"../assets/users_array.json\";\nimport fly from \"../assets/fly.jpg\";\n\nexport default () => {\n  const [userValue, setUserValue] = useState(\"\");\n  const [userObject, setUserObject] = useState({});\n\n  return (\n    <>\n      <Jumbotron\n        style={{\n          backgroundSize: \"cover\",\n          backgroundImage: `linear-gradient(to top, rgba(255,255,255,0), rgba(255,255,255,0.7)), url(${fly})`,\n        }}\n      >\n        <h1>recommend rumney!</h1>\n        <p>\n          Want a custom recommendation for an amazing route you haven't yet\n          tried??\n        </p>\n        <p>\n          <Link to=\"/about\">\n            <Button variant=\"info\">How it works</Button>\n          </Link>\n        </p>\n      </Jumbotron>\n\n      <Container>\n        <h3>Already a contributor?</h3>\n        <p>Search for your Mountain Project username below.</p>\n        <Autocomplete\n          value={userValue}\n          setValue={setUserValue}\n          setItem={setUserObject} // placeholder; could use this to grab data on user\n          items={users_array}\n          itemKey={\"user\"}\n          sortKey={\"n_votes\"}\n        />\n        {userObject.n_votes !== null && (\n          <p>\n            Wow, congratulations <b>{userValue}</b>! You have given star ratings\n            to <b>{userObject.n_votes}</b> routes in the Mountain Project Rumney\n            database. You are {adjective(userObject.n_votes)} user.\n          </p>\n        )}\n\n        <Row style={{ marginTop: \"5rem\" }}>\n          <Col>\n            <Link to=\"/preferences\">\n              <Button size=\"lg\">Build your own custom preferences</Button>\n            </Link>\n          </Col>\n          {userObject.n_votes !== null && (\n            <Col>\n              <Link to=\"/implement-this\">\n                <Button size=\"lg\">Use your existing ratings</Button>\n              </Link>\n            </Col>\n          )}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nconst adjective = (measure) => {\n  if (measure > 100) {\n    return \"an exceptional\";\n  }\n  if (measure > 20) {\n    return \"a distinguished\";\n  }\n  if (measure > 5) {\n    return \"a capable\";\n  } else {\n    return \"an uncommitted\";\n  }\n};\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport ReactMarkdown from \"react-markdown\";\nimport raw from \"raw.macro\";\n\nexport default () => (\n  <Container>\n    <ReactMarkdown source={raw(\"../README.md\")} />\n  </Container>\n);\n","import React from \"react\";\nimport StarRatingComponent from \"react-star-rating-component\";\n\nexport default (props) => {\n  return (\n    <>\n      Rate it.\n      <StarRatingComponent\n        style={{ position: \"absolute\" }}\n        starColor=\"gold\"\n        emptyStarColor=\"lightgray\"\n        name={\"to be given route name\"}\n        starCount={4}\n        value={props.rating}\n        onStarClick={(nextValue) => props.setRating(nextValue)}\n        // renderStarIcon={(index, value) => {\n        //   return <span>☆</span>;\n        // }}\n      />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Autocomplete from \"./Autocomplete\";\nimport Stars from \"./Stars\";\nimport routes_array from \"../assets/routes_array.json\";\nimport { Button } from \"react-bootstrap\";\n\nexport default (props) => {\n  const [autocompleteValue, setAutocompleteValue] = useState(props.value);\n  return (\n    <Row>\n      <Col>\n        <Autocomplete\n          value={autocompleteValue}\n          setValue={setAutocompleteValue}\n          setItem={(newRoute) => props.setRoute(newRoute, props.index)}\n          items={routes_array}\n          itemKey={\"route\"}\n          sortKey={\"n_votes\"}\n          inputProps={{ style: { width: \"20rem\" } }}\n        />\n      </Col>\n\n      <Col>\n        <Stars\n          rating={props.rating}\n          setRating={(newRating) => props.setRating(newRating, props.index)}\n        />\n      </Col>\n\n      <Col>\n        <Button\n          onClick={() => {\n            props.setRoute({}, props.index);\n            props.setRating(0, props.index);\n            setAutocompleteValue(\"\");\n          }}\n        >\n          clear\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import starsObject from \"./assets/stars_object.json\";\nimport routesArray from \"./assets/routes_array.json\";\nimport stdObject from \"./assets/std_object.json\";\nimport slopeOneObject from \"./assets/slope_one_object.json\";\n\n/* Transform array of {route, rating} objects into a single object of\nthe form {route: rating} */\nfunction routeListToObjectOfRatings(routeList) {\n  const validList = routeList.filter((item) => item.route && item.rating);\n  return validList.reduce(\n    (acc, item) => ({ ...acc, [item.route]: item.rating }),\n    {}\n  );\n}\n\n/* Determine routes in common to user1 and user2. Returns an array of route names. */\nfunction getIntersection(user1, user2) {\n  return Object.keys(user1).filter({}.hasOwnProperty.bind(user2));\n}\n\n/* Calculate taxicab distance between stars in user1 and user2 restricted to \nkeys. */\nfunction getDistance(user1, user2, keys) {\n  return keys.reduce((sum, key) => sum + Math.abs(user1[key] - user2[key]), 0);\n}\n\n/* Return an object of the form {user: {dist, influence}}. */\nfunction getWeights(preferences) {\n  // Considering users who have reviewed routes in preferences.\n  return Object.keys(starsObject).reduce((acc, user) => {\n    // Influence of the user is the log of the number of routes rated.\n    const influence = Math.log2(Object.keys(starsObject[user]).length);\n    const intersection = getIntersection(starsObject[user], preferences);\n    let dist = getDistance(starsObject[user], preferences, intersection);\n    // Penalizing small intersection by adding in the standard deviation of\n    // those routes within preferences and outside of user. The exact penality\n    // here is somewhat aribtrary.\n    const complementRoutes = Object.keys(preferences).filter(\n      (route) => !intersection.includes(route)\n    );\n\n    const penalty = complementRoutes.reduce(\n      (total, route) => total + stdObject[route],\n      0\n    );\n\n    dist += penalty;\n    dist++; // TODO: do something better here!\n    return { ...acc, [user]: { dist, influence } };\n  }, {});\n}\n\n/* Sort an object based on score key. Return type same as Object.entries() .*/\nfunction sortPredictions(recs) {\n  const asObject = recs.reduce(\n    (acc, cur) => ({ ...acc, [cur.route]: cur }),\n    {}\n  );\n  const asPairs = Object.entries(asObject);\n  return asPairs.sort((a, b) => b[1].prediction - a[1].prediction);\n}\n\n/* Returns an array of route names sorted in reverse by their recommendation. */\nfunction nearestNeighbors(preferences, initialRoutesArray) {\n  const weights = getWeights(preferences);\n\n  // Object to populate with scores\n  let routesAsObjects = initialRoutesArray.reduce(\n    (acc, cur) => ({ ...acc, [cur.route]: { ...cur, score: 0, maxScore: 0 } }),\n    {}\n  );\n  routesAsObjects = Object.entries(starsObject).reduce(\n    (acc, [user, routeObject]) => {\n      for (const route in routeObject) {\n        const multiplier = (1 / weights[user].dist) * weights[user].influence;\n        acc[route].score += routeObject[route] * multiplier;\n        acc[route].maxScore += multiplier;\n      }\n      return acc;\n    },\n    routesAsObjects\n  );\n\n  return Object.values(routesAsObjects).map((object) => {\n    const predictions = {\n      ...object,\n      neighbor_prediction: object.maxScore ? object.score / object.maxScore : 0,\n    };\n    delete predictions.score;\n    delete predictions.maxScore;\n    return predictions;\n  });\n}\n\n/* Make recommendation using previously calculated slope one parameters. */\nfunction slopeOne(preferences, initialRoutesArray) {\n  return initialRoutesArray.map((route2) => {\n    const key = (route1) => route1 + \" \" + route2.route; // helper function\n    let route1Array = Object.entries(preferences).filter(\n      ([route1]) => key(route1) in slopeOneObject\n    );\n\n    route1Array = route1Array.map(\n      ([route1, rating]) => rating - slopeOneObject[key(route1)]\n    );\n\n    // averaging over all route1\n    const l = route1Array.length;\n    const s = route1Array.reduce((sum, cur) => sum + cur, 0);\n    // could give small bonus to more popular route2 here\n    let prediction = l ? s / l : 0; // avoiding dividing by 0\n    prediction = Math.min(prediction, 4); // clipping\n    prediction = Math.max(prediction, 0); // clipping\n    return { ...route2, slope_one_prediction: prediction };\n  });\n}\n\n/* Run all recommendation algorithms. */\nfunction getRecommendations(preferences) {\n  // Functional approach .... recommendations is getting populated with new\n  // predictions for each algorithm.\n  let recommendations = slopeOne(preferences, routesArray);\n  recommendations = nearestNeighbors(preferences, recommendations);\n\n  // Taking average of all recommendations\n  // TODO: generalize this\n  // Not very functional!\n  recommendations.forEach((object) => {\n    object.avg_prediction =\n      (object.neighbor_prediction + object.slope_one_prediction) / 2;\n  });\n\n  recommendations = recommendations.map((object) => {\n    Object.keys(object).forEach((key) => {\n      if (typeof object[key] === \"number\") {\n        object[key] = object[key].toFixed(2); // toFixed converts to string\n      }\n    });\n    return object;\n  });\n  return recommendations;\n}\n\nexport {\n  getRecommendations,\n  nearestNeighbors,\n  slopeOne,\n  routeListToObjectOfRatings,\n};\n","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\nconst Range = createSliderWithTooltip(Slider.Range);\n\n// Building array of climbing grades\nexport const gradeList = [];\nfor (let n = 0; n < 15; n++) {\n  const subGrade = n < 10 ? [\"\"] : [\"a\", \"b\", \"c\", \"d\"];\n  for (const letter of subGrade) {\n    gradeList.push(\"5.\" + n.toString() + letter);\n  }\n}\ngradeList.push(\"5.15a\");\n\nconst gradeToNumberObject = gradeList.reduce(\n  (acc, grade, index) => ({ ...acc, [grade]: index }),\n  {}\n);\n\n// Building a function to deal with edge cases such as 5.12a/b and 5.8+\nexport const gradeToNumber = (grade) => {\n  let number = gradeToNumberObject[grade];\n  if (number === undefined) {\n    if (grade[2] === \"1\") {\n      // e.g. grade = 5.1xxxx\n      number = gradeToNumberObject[grade.slice(0, 5)]; // truncating slash grade\n      if (number === undefined) {\n        // e.g. grade = 5.10-\n        number = gradeToNumberObject[grade.slice(0, 4) + \"a\"]; // converting to 5.10a\n      }\n    } else {\n      // e.g. grade = 5.8+\n      number = gradeToNumberObject[grade.slice(0, 3)];\n    }\n  }\n  return number;\n};\n\nexport default (props) => (\n  <div style={{ margin: 50 }}>\n    <Range\n      min={0}\n      max={gradeList.length - 1}\n      defaultValue={[0, gradeList.length - 1]}\n      onChange={(value) => {\n        props.setLower(value[0]);\n        props.setUpper(value[1]);\n      }}\n      tipFormatter={(value) => gradeList[value]}\n      // could use indexOf('5.10a') to find an initial index\n      marks={[2, 6, 10, 14, 18, 22, 26, 30].reduce(\n        (acc, cur) => ({ ...acc, [cur]: gradeList[cur] }),\n        {}\n      )}\n    />\n  </div>\n);\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Alert, Spinner } from \"react-bootstrap\";\nimport { getRecommendations, routeListToObjectOfRatings } from \"../algorithm\";\nimport Redirect from \"react-router-dom/Redirect\";\n\nexport default (props) => {\n  return (\n    <>\n      <Button\n        variant=\"primary\"\n        disabled={props.submitButtonClicked && props.allowSubmit}\n        onClick={\n          !props.submitButtonClicked\n            ? () => {\n                props.setSubmitButtonClicked(true);\n              }\n            : null\n        }\n      >\n        {props.allowSubmit && props.submitButtonClicked ? (\n          <LoadingButtonText\n            allowSubmit={props.allowSubmit}\n            submitButtonClicked={props.submitButtonClicked}\n            routeList={props.routeList}\n            setRecommendations={props.setRecommendations}\n          />\n        ) : (\n          \"Get Recommendations\"\n        )}\n      </Button>\n      {!props.allowSubmit && props.submitButtonClicked && (\n        <Alert variant=\"warning\" style={{ marginTop: 50 }}>\n          You must complete preferences for {props.minRequired} distinct routes\n          to continue. So far you have only completed preferences for{\" \"}\n          {Object.keys(routeListToObjectOfRatings(props.routeList)).length}{\" \"}\n          distinct routes.\n        </Alert>\n      )}\n    </>\n  );\n};\n\nconst LoadingButtonText = (props) => {\n  const [recommendations, setRecommendations] = useState(null);\n\n  useEffect(() => {\n    // Timeout guarantees \"Calculating...\" will render before recommendations calculated\n    setTimeout(\n      () =>\n        setRecommendations(\n          getRecommendations(routeListToObjectOfRatings(props.routeList))\n        ),\n      50\n    );\n  }, [props.routeList]);\n\n  return (\n    <>\n      <div>Calculating...</div>\n      <Spinner animation=\"border\" variant=\"info\" />\n      {recommendations !== null && (\n        <Redirect\n          push\n          to={{\n            pathname: \"/recommendation\",\n            recommendations: recommendations,\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Button } from \"react-bootstrap\";\nimport RankedRoute from \"./RankedRoute\";\nimport LoadingButton from \"./LoadingButton\";\nimport { routeListToObjectOfRatings } from \"../algorithm\";\n\n// Minimum number of preferences before allowing submission\nconst minRequired = 1;\n\nexport default () => {\n  // Reloading previous state after pressing back button from recommendations.\n  const initialRouteList =\n    window.history.state !== null\n      ? window.history.state\n      : [{ route: \"\", rating: 0 }];\n\n  const [routeList, setRouteList] = useState(initialRouteList);\n  const [submitButtonClicked, setSubmitButtonClicked] = useState(false);\n  const [allowSubmit, setAllowSubmit] = useState(false);\n\n  // Add a new <RankedRoute> if the last one has been filled.\n  useEffect(() => {\n    window.history.replaceState(routeList, \"\"); // in order to reload after back\n    setAllowSubmit(\n      Object.keys(routeListToObjectOfRatings(routeList)).length >= minRequired\n    );\n    if (\n      routeList[routeList.length - 1].route &&\n      routeList[routeList.length - 1].rating\n    ) {\n      setRouteList([...routeList, { route: \"\", rating: 0 }]);\n      setSubmitButtonClicked(false); // reset the button to hide alert\n    }\n  }, [routeList]);\n\n  return (\n    <Container className=\"p-3\">\n      <h1>Preferences</h1>\n      <Row style={{ marginBottom: 50 }}>\n        <p>\n          In order to get a recommendation, you need to provide the algorithm\n          some of your current preferences. Enter several Rumney routes for\n          which you have strong opinions (positive or negative) below.\n        </p>\n\n        <Button onClick={() => setRouteList([{ route: \"\", rating: 0 }])}>\n          Reset all\n        </Button>\n      </Row>\n\n      {routeList.map((routeObject, index) => (\n        <Row key={index /* very very import to have this key! */}>\n          <RankedRoute\n            index={index}\n            value={routeObject.route}\n            setRoute={(newRoute, passedIndex) => {\n              const newRouteList = [...routeList];\n              newRouteList[passedIndex].route = newRoute.route;\n              setRouteList(newRouteList);\n            }}\n            rating={routeObject.rating}\n            setRating={(newRating, passedIndex) => {\n              const newRouteList = [...routeList];\n              newRouteList[passedIndex].rating = newRating;\n              setRouteList(newRouteList);\n            }}\n          />\n        </Row>\n      ))}\n\n      <LoadingButton\n        routeList={routeList}\n        allowSubmit={allowSubmit}\n        submitButtonClicked={submitButtonClicked}\n        setSubmitButtonClicked={setSubmitButtonClicked}\n        minRequired={minRequired}\n      />\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { useTable, useSortBy, useBlockLayout } from \"react-table\";\nimport styled from \"styled-components\";\nimport { Row } from \"react-bootstrap\";\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nfunction Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        sortBy: [\n          {\n            id: \"avg_prediction\",\n            desc: true,\n          },\n        ],\n      },\n      sortDescFirst: true,\n    },\n    useSortBy,\n    useBlockLayout\n  );\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" 🔽\"\n                        : \" 🔼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n    </>\n  );\n}\n\nexport default (props) => {\n  // TODO: consider using useMemo?\n  const columns = [\n    {\n      Header: \"Route\",\n      accessor: \"route\",\n      Cell: ({ row }) => <a href={row.original.url}> {row.values.route} </a>,\n    },\n    {\n      Header: \"Average MP stars\",\n      accessor: \"avg_stars\",\n      sortDescFirst: true,\n      sortMethod: (a, b) => Number(a) - Number(b),\n    },\n    {\n      Header: \"Average prediction\",\n      accessor: \"avg_prediction\",\n      sortDescFirst: true,\n      sortMethod: (a, b) => Number(a) - Number(b),\n    },\n    {\n      Header: \"Nearest-neighbors prediction\",\n      accessor: \"neighbor_prediction\",\n      sortDescFirst: true,\n      sortMethod: (a, b) => Number(a) - Number(b),\n    },\n    {\n      Header: \"Slope-one prediction\",\n      accessor: \"slope_one_prediction\",\n      sortDescFirst: true,\n      sortMethod: (a, b) => Number(a) - Number(b),\n    },\n    { Header: \"Grade\", accessor: \"grade\" },\n  ];\n  const data = props.data; // useMemo?\n\n  return (\n    <Styles>\n      <Table columns={columns} data={data} />;\n    </Styles>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Alert } from \"react-bootstrap\";\nimport Link from \"react-router-dom/Link\";\nimport Slider, { gradeToNumber, gradeList } from \"./Slider\";\nimport SortableTable from \"./SortableTable\";\n\nexport default (props) => {\n  const [lower, setLower] = useState(0);\n  const [upper, setUpper] = useState(gradeList.length - 1);\n  const recommendations = props.location.recommendations;\n  const [filteredRecs, setFilteredRecs] = useState(recommendations);\n\n  return (\n    <Container>\n      <h1 style={{ margin: 50 }}>Recommendations</h1>\n      {recommendations === undefined ? (\n        <Alert variant=\"warning\">\n          No preferences recorded. Please go to the{\" \"}\n          <Link to=\"/preferences\">preferences page</Link> to log your opinions.\n        </Alert>\n      ) : (\n        <SortableTable data={recommendations} />\n      )}\n    </Container>\n  );\n\n  // useEffect(() => {\n  //   if (recommendations !== undefined) {\n  //     setFilteredRecs(\n  //       recommendations.filter((route) => {\n  //         const grade = gradeToNumber(route[1].grade);\n  //         return grade <= upper && grade >= lower;\n  //       })\n  //     );\n  //   }\n  // }, [lower, upper, recommendations]);\n\n  // return (\n  //   <Container>\n  //     <h1 style={{ margin: 50 }}>Recommendations</h1>\n  //     {recommendations === undefined ? (\n  //       <Alert variant=\"warning\">\n  //         No preferences recorded. Please go to the{\" \"}\n  //         <Link to=\"/preferences\">preferences page</Link> to log your opinions.\n  //       </Alert>\n  //     ) : (\n  //       <>\n  //         <p>Use the slider to filter by grade.</p>\n  //         <Slider\n  //           lower={lower}\n  //           setLower={setLower}\n  //           upper={upper}\n  //           setUpper={setUpper}\n  //         />\n  //         <p>\n  //           The recommendation algorithm sorts the routes below according to a\n  //           predicted number of stars you'd give them.\n  //         </p>\n  //         <table>\n  //           <thead>\n  //             <tr>\n  //               <th>Route</th>\n  //               <th>Grade</th>\n  //               <th>Predicted Stars</th>\n  //             </tr>\n  //           </thead>\n  //           <tbody>\n  //             {filteredRecs.map(([route, routeInfo]) => (\n  //               <tr key={route}>\n  //                 <td>\n  //                   <a href={routeInfo.url}>{route.slice(0, 52)}</a>\n  //                 </td>\n  //                 <td>{routeInfo.grade}</td>\n  //                 <td>{routeInfo.prediction}</td>\n  //               </tr>\n  //             ))}\n  //           </tbody>\n  //         </table>\n  //       </>\n  //     )}\n  //   </Container>\n  // );\n};\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Preferences from \"./components/Preferences\";\nimport Recommendation from \"./components/Recommendation\";\n\nexport default () => (\n  <Router>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"/preferences\" component={Preferences} />\n    <Route path=\"/recommendation\" component={Recommendation} />\n  </Router>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/fly.000c2b74.jpg\";"],"sourceRoot":""}